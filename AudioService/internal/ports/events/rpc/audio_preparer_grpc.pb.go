// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: audio_preparer.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AudioPreparer_FindAudio_FullMethodName = "/audio_preparer.AudioPreparer/find_audio"
	AudioPreparer_AddAudio_FullMethodName  = "/audio_preparer.AudioPreparer/add_audio"
)

// AudioPreparerClient is the client API for AudioPreparer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AudioPreparerClient interface {
	FindAudio(ctx context.Context, in *Audio, opts ...grpc.CallOption) (*AudioResponse, error)
	AddAudio(ctx context.Context, in *Audio, opts ...grpc.CallOption) (*AudioResponse, error)
}

type audioPreparerClient struct {
	cc grpc.ClientConnInterface
}

func NewAudioPreparerClient(cc grpc.ClientConnInterface) AudioPreparerClient {
	return &audioPreparerClient{cc}
}

func (c *audioPreparerClient) FindAudio(ctx context.Context, in *Audio, opts ...grpc.CallOption) (*AudioResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AudioResponse)
	err := c.cc.Invoke(ctx, AudioPreparer_FindAudio_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audioPreparerClient) AddAudio(ctx context.Context, in *Audio, opts ...grpc.CallOption) (*AudioResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AudioResponse)
	err := c.cc.Invoke(ctx, AudioPreparer_AddAudio_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AudioPreparerServer is the server API for AudioPreparer service.
// All implementations must embed UnimplementedAudioPreparerServer
// for forward compatibility.
type AudioPreparerServer interface {
	FindAudio(context.Context, *Audio) (*AudioResponse, error)
	AddAudio(context.Context, *Audio) (*AudioResponse, error)
	mustEmbedUnimplementedAudioPreparerServer()
}

// UnimplementedAudioPreparerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAudioPreparerServer struct{}

func (UnimplementedAudioPreparerServer) FindAudio(context.Context, *Audio) (*AudioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAudio not implemented")
}
func (UnimplementedAudioPreparerServer) AddAudio(context.Context, *Audio) (*AudioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAudio not implemented")
}
func (UnimplementedAudioPreparerServer) mustEmbedUnimplementedAudioPreparerServer() {}
func (UnimplementedAudioPreparerServer) testEmbeddedByValue()                       {}

// UnsafeAudioPreparerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AudioPreparerServer will
// result in compilation errors.
type UnsafeAudioPreparerServer interface {
	mustEmbedUnimplementedAudioPreparerServer()
}

func RegisterAudioPreparerServer(s grpc.ServiceRegistrar, srv AudioPreparerServer) {
	// If the following call pancis, it indicates UnimplementedAudioPreparerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AudioPreparer_ServiceDesc, srv)
}

func _AudioPreparer_FindAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Audio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioPreparerServer).FindAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AudioPreparer_FindAudio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioPreparerServer).FindAudio(ctx, req.(*Audio))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudioPreparer_AddAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Audio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioPreparerServer).AddAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AudioPreparer_AddAudio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioPreparerServer).AddAudio(ctx, req.(*Audio))
	}
	return interceptor(ctx, in, info, handler)
}

// AudioPreparer_ServiceDesc is the grpc.ServiceDesc for AudioPreparer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AudioPreparer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "audio_preparer.AudioPreparer",
	HandlerType: (*AudioPreparerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "find_audio",
			Handler:    _AudioPreparer_FindAudio_Handler,
		},
		{
			MethodName: "add_audio",
			Handler:    _AudioPreparer_AddAudio_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "audio_preparer.proto",
}
